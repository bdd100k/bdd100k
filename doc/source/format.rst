Label Format
===========

This is compatible with the labels generated by
`Scalabel <https://www.scalabel.ai/>`_. The labels are released in `Scalabel Format
<https://doc.scalabel.ai/format.html>`_. A label
`json <https://google.github.io/styleguide/jsoncstyleguide.xml>`_ file is a list
of frame objects with the fields below. Please note that this format is a
superset of the data fields. For example, `box3d` may be absent if the label is
a 2d bounding box, and `intrinsics` may not appear if the exact camera
calibration is unknown.

BDD100K dataset has some specific properties.

Frame attributes

.. code-block:: yaml

    - weather: "rainy|snowy|clear|overcast|undefined|partly cloudy|foggy"
    - scene: "tunnel|residential|parking lot|undefined|city street|gas stations|highway|"
    - timeofday: "daytime|night|dawn/dusk|undefined"

Label attributes

.. code-block:: yaml

    - occluded: boolean
    - truncated: boolean
    - trafficLightColor: "red|green|yellow|none"
    - areaType: "direct | alternative" (for driving area)
    - laneDirection: "parallel|vertical" (for lanes)
    - laneStyle: "solid | dashed" (for lanes)
    - laneTypes: (for lanes)


Road object categories:

.. code-block:: json

    [
        "bike",
        "bus",
        "car",
        "motor",
        "person",
        "rider",
        "traffic light",
        "traffic sign",
        "train",
        "truck"
    ]


They are labeld by `box2d`.

Drivable area category is `drivable area`. There are two area types `areaType`:

.. code-block:: json

    [
        "alternative",
        "direct"
    ]


Lane marking category is `lane`. There are 8 lane types `laneTypes`:

.. code-block:: json

    [
        "crosswalk",
        "double other",
        "double white",
        "double yellow",
        "road curb",
        "single other",
        "single white",
        "single yellow"
    ]


Both drivable areas and lane markings are labeled by `poly2d`. Please check the
visulization code |vis_labels|_ for examples of
drawing all the labels.

.. |vis_labels| replace:: ``bdd100k.vis.labels``
.. _vis_labels: https://github.com/bdd100k/bdd100k/blob/master/bdd100k/vis/labels.py

The labels for semantic segmentation are encoded in the field ``train_id`` defined in |bdd100k_label|_,
e.g. car should be 13.

.. |bdd100k_label| replace:: ``bdd100k.label.label``
.. _bdd100k_label: https://github.com/bdd100k/bdd100k/blob/master/bdd100k/label/label.py



Segmentation Label Formats
~~~~~~~~~

We provide labels in both json and bitmask formats.
Note that polygons stored in jsons is not the same format with COCO.
Instead, the "poly2d" entry in jsons stores vertices and control points of Bezeir Curves. 

For segmentation labels, besides jsons files contain "poly2d" field, we also provide bitmasks labels.
In this format, labels for each image is stored in an **RGBA** png file.

For the RGBA image, The first byte, R, is used for the category id range from 1 (0 is used for background).
And G is for the instance attributes. Currently, four attributes are used, they are "truncated", "occluded", "crowd" and "ignore".
Note that boxes with "crowd" or "ignore" labels will not be considered during testing.
The above four attributes are stored in lowest important bits of G. Given this, ``G = 8 & truncated + 4 & occluded + 2 & crowd + ignore``
. Finally, the B channel and A channel together store the "ann_id" for instance segmentation and "ann_id" for segmentation tracking, respectively.
which can be computed as ``B * 256 + A``. You can also refer to the below image for reference.

.. figure:: ../images/bitmask.png
   :alt: Downloading buttons

You can run the conversion from poly2d to bitmasks by this command:
::
    
    python3 -m bdd100k.label.to_bitmasks -m box_track|seg_track -i ${in_path} -o ${iout_path}  

However, as the conversion process is not determinitic, we don't recommend converting it by yourself.
The evaluation scripts uses bitmasks as ground-truth, so we suggest using bitmasks as input all the way.
